@page "/campaign/{campaignId:guid}"

@using Application.Features.CampaignFeatures.DataTransferObjects
@using Application.Features.SessionFeatures.DataTransferObjects
@using Application.Features.NarratorFeatures.DataTransferObjects
@using Application.Features.AuthenticationFeatures.DataTransferObjects

@inject HttpClient Http

@inject ISnackbar Snackbar
@* @inject IStringLocalizer<CampaignResource> Localizer *@


@if (Campaign != null)
{
    <MudGrid Spacing="2" class="pt-2" Style="height: 95vh;">
        
        <!-- Left Panel for Sessions -->
        <MudItem xs="3" Style="height: 100%;">
            <MudPaper Class="p-2" Style="height: 100%; display: flex; flex-direction: column;">
                <MudText Typo="Typo.h6">@Campaign.Name Sessions</MudText>

                <MudButton Class="pt-3 m-3 d-flex justify-center" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="CreateNewSession">NEW SESSION</MudButton>

                @if (CampaignSessions != null)
                {
                    <MudStack Spacing="2" Style="flex-grow: 1; overflow-y: auto; padding-top: 1rem;">
                        @foreach (var session in CampaignSessions)
                        {
                            <MudPaper Class="pa-3">
                                <MudText Typo="Typo.body1">@session.CreationDate.Date.ToString()</MudText>
                            </MudPaper>
                        }
                    </MudStack>
                }

            </MudPaper>
        </MudItem>

        <!-- Chat Box Panel -->
        <MudItem xs="6" Style="height: 100%;">
            <MudContainer Style="margin: auto; max-width: 650px;">
                <MudStack Spacing="2">
                    <MudSelect T="string" Label="Select Roleplay System" @bind-Value="selectedModel">
                        @foreach (var model in modelOptions)
                        {
                            <MudSelectItem Value="@model">@model</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect T="string" Label="Select Prompt" @bind-Value="selectedPrompt">
                        @foreach (var prompt in prompts)
                        {
                            <MudSelectItem Value="@prompt">@prompt</MudSelectItem>
                        }
                    </MudSelect>

                    <MudPaper Class="pa-4">
                        @foreach (var message in Messages)
                        {
                            <div class="d-flex flex-row my-4">
                                <div class="mr-4">
                                    @*<MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@message.UserEmail.ToUpper().FirstOrDefault()</MudAvatar>*@
                                </div>
                                <div>
                                    <MudText Typo="Typo.body1">@message</MudText>
                                    @*<MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>*@
                                    <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message</MudText>
                                </div>
                            </div>
                        }
                    </MudPaper>

                    <MudTextField @bind-Value="CurrentMessage" Placeholder="Type your message..." Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="SendMessage" />

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartNewConversation">
                        Start New Conversation
                    </MudButton>
                </MudStack>
            </MudContainer>
        </MudItem>

        <!-- Placeholder for Campaign Properties Menu -->
        <MudItem xs="3" Style="height: 100%;">
            <MudPaper Class="p-2" Style="height: 100%; display: flex; flex-direction: column;">
                <MudText Typo="Typo.h5">Campaign Properties</MudText>
                <MudText Typo="Typo.h5">@Campaign.Name</MudText>
                <MudText Typo="Typo.body2">@Campaign.Description</MudText>
            </MudPaper>
        </MudItem>
    
    </MudGrid>

}
else
{
    <MudText Typo="Typo.h6">Loading campaign data...</MudText>
}

@code
{
    [Parameter]
    public Guid campaignId { get; set; }

    public CampaignDTO Campaign { get; set; }

    public NarratorDTO CurrentNarrator { get; set; }

    public List<SessionDTO> CampaignSessions { get; set; } = new();

    public string selectedModel { get; set;  } = "gpt-3.5-turbo";
    public string selectedPrompt { get; set; } = string.Empty;
    public string CurrentMessage { get; set; } = string.Empty;
    
    public List<string> Messages { get; set; } = new List<string>();
    public List<string> modelOptions { get; set; } = new() { "gpt-3.5-turbo", "gpt-4" };
    public List<string> prompts { get; set; } = new() { "Fantasy Adventure", "Mystery Thriller", "Sci-Fi Exploration" };


    protected override async Task OnInitializedAsync()
    {
        var response = await CampaignService.GetCampaignAsync(campaignId);

        Campaign = response.Campaign;

        CampaignSessions = Campaign.Sessions;
    }


    // GPT Narrator:

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(CurrentMessage))
        {
            var response = await GPTNarratorService.SendMessageAsync(CurrentNarrator.Id, CurrentNarrator.GPTConversationId, CurrentMessage, selectedModel);
            Messages.Add($"You: {CurrentMessage}");
            Messages.Add($"AI: {response}");
            CurrentMessage = "";
        }
    }

    private async Task StartNewConversation()
    {
        var initialResponse = await GPTNarratorService.SendMessageAsync(CurrentNarrator.Id, CurrentNarrator.GPTConversationId, selectedPrompt, selectedModel);
        Messages.Clear();
        Messages.Add($"AI: {initialResponse}");
    }

    private async Task LoadConversationHistory(string conversationId)
    {
        var history = await GPTNarratorService.GetConversationHistoryAsync(conversationId);
        Messages = history.Select(msg => $"AI: {msg}").ToList();
    }


    // Sessions:

    private async Task CreateNewSession()
    {
        try
        {
            var result = await CampaignService.CreateCampaignSessionAsync(new SessionDTO
            {
                OwnerCampaignId = campaignId,
                CreationDate = DateTimeOffset.Now
            });

            if (result.Flag)
            {
                NavigationManager.NavigateTo($"/campaign/{campaignId}", forceLoad: true);
            }

            Snackbar.Add(result.Message, result.Flag ? MudBlazor.Severity.Success : MudBlazor.Severity.Error);
        }
        catch
        {
            return;
        }
    }

}
