@using Application.Features.CampaignFeatures.DataTransferObjects
@using Application.Features.AuthenticationFeatures.DataTransferObjects

@inject ISnackbar Snackbar

<AuthorizeView>
    <Authorized>
        <MudDialog>
            <TitleContent>
                Create Campaign
            </TitleContent>
            <DialogContent>
                <MudForm @ref="form" Model="campaignDTO" Validation="@(validationResult.IsValid ? Array.Empty<string>() : validationResult.Errors.Select(e => e.ErrorMessage))" ValidationDelay="0">
                    <MudTextField @bind-Value="campaignDTO.Name"
                                  Label="Name"
                                  Required="true"
                                  For="@(() => campaignDTO.Name)"
                                  Immediate="true"
                                  OnBlur="ValidateForm"/>
                
                    <MudTextField @bind-Value="campaignDTO.Description"
                                  Label="Description"
                                  Required="true"
                                  For="@(() => campaignDTO.Description)"
                                  Immediate="true"
                                  OnBlur="ValidateForm"/>

                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadBannerImage">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Image">
                                Upload a Banner Image
                            </MudButton>
                        </ActivatorContent>
                        <SelectedTemplate>
                            @if (bannerImage != null)
                            {
                                <MudImage Src="@SelectedImageSrc" Alt="Campaign Image" Elevation="25" Class="rounded-lg" />
                            }
                            else
                            {
                                <MudText>No Selected Image</MudText>
                            }
                        </SelectedTemplate>
                    </MudFileUpload>
                
                </MudForm>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="HandleValidSubmit">Create</MudButton>
            </DialogActions>
        </MudDialog>
    </Authorized>

    <NotAuthorized>
        <MudDialog>
            <TitleContent>
                Campaign Creation
            </TitleContent>
            <DialogContent>
                Not authorized to display content, please log in.
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
            </DialogActions>
        </MudDialog>
    </NotAuthorized>
</AuthorizeView>


@code
{
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    CampaignDTO campaignDTO = new();

    MudForm form;

    ValidationResult validationResult;

    IBrowserFile bannerImage { get; set; }

    string Message { get; set; } = string.Empty;
    string SelectedImageSrc { get; set; } = string.Empty;

    private async Task HandleValidSubmit()
    {
        var validator = new CampaignValidator();
        validationResult = validator.Validate(campaignDTO);

        if (!validationResult.IsValid)
        {
            foreach (var error in validationResult.Errors)
            {
                Snackbar.Add(error.ErrorMessage, MudBlazor.Severity.Error);
            }
            return;
        }

        try
        {
            var content = new MultipartFormDataContent();

            content.Add(new StringContent(campaignDTO.Name), "Name");
            content.Add(new StringContent(campaignDTO.Description), "Description");

            var result = await CampaignService.CreateCampaignAsync(campaignDTO);

            var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;

            if (!result.Flag && validationResult.IsValid)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            {
                Message = result.Message;
            }

            Snackbar.Add(Message, !result.Flag ? MudBlazor.Severity.Success : MudBlazor.Severity.Error);
        }
        catch
        {
            return;
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void UploadBannerImage(IBrowserFile imageFile)
    {
        if (imageFile == null || imageFile.Size == 0) return;

        using var ms = new MemoryStream();

        imageFile.OpenReadStream(10485760).CopyToAsync(ms);

        var fileBytes = ms.ToArray();

        campaignDTO.FileName = imageFile.Name;
        campaignDTO.ContentType = imageFile.ContentType;
        campaignDTO.Data = fileBytes;

        var imagesrc = Convert.ToBase64String(fileBytes);
        
        SelectedImageSrc = string.Format("data:image/jpeg;base64,{0}", imagesrc);
    }

    private void ValidateForm()
    {
        var validator = new CampaignValidator();
        
        validationResult = validator.Validate(campaignDTO);
        
        form.Validate();
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));
    private void Cancel() => MudDialog.Cancel();


    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API.
    /// </summary>
    /// <typeparam name="OrderModel"></typeparam>
    public class CampaignValidator : AbstractValidator<CampaignDTO>
    {
        public CampaignValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Name is required.")
                .MaximumLength(50).WithMessage("Name cannot exceed 50 characters.");

            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("Description is required.")
                .MaximumLength(1000).WithMessage("Description cannot exceed 1000 characters.");

            When(x => x.Data != null, () =>
            {
                RuleFor(x => x.Data!.Length).LessThanOrEqualTo(10485760).WithMessage("The maximum image file size is 10 MB.");
            });
        }
    }
}