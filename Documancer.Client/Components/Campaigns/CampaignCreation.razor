@using Application.Features.CampaignFeatures.DataTransferObjects
@using Application.Features.AuthenticationFeatures.DataTransferObjects
@using System.Security.Claims

@inject ISnackbar Snackbar


<AuthorizeView>
    <Authorized>

        <MudDialog>
            <TitleContent>
                Create Campaign
            </TitleContent>
            <DialogContent>
                <MudForm @ref="form" Model="campaignDTO" Validation="@(campaignValidator.ValidateValue)" ValidationDelay="0">
                    <MudTextField @bind-Value="campaignDTO.Name"
                                  For="@(() => campaignDTO.Name)"
                                  Required="true"
                                  Label="Name"
                                  />
                
                    <MudTextField @bind-Value="campaignDTO.Description"
                                  For="@(() => campaignDTO.Description)"
                                  Required="true"
                                  Label="Description"
                                  />

                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadBannerImage">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Upload Files
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>

                    @if (!string.IsNullOrEmpty(SelectedImageSrc))
                    {
                        <MudImage Src="@SelectedImageSrc" Alt="Thumbnail" Width="150" Height="150" Class="rounded-lg" />
                    }
                    else
                    {
                        <MudText>No image selected</MudText>
                    }

                </MudForm>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="HandleValidSubmit">Create</MudButton>
            </DialogActions>
        </MudDialog>

    </Authorized>
</AuthorizeView>


@code
{
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    CampaignDTO campaignDTO = new();

    MudForm form;

    CampaignValidator campaignValidator = new CampaignValidator();

    IBrowserFile bannerImage { get; set; }

    string Message { get; set; } = string.Empty;
    string SelectedImageSrc { get; set; } = string.Empty;

    private async Task HandleValidSubmit()
    {
        try
        {
            await form.Validate();

            var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            var authenticationState = await customAuthenticationStateProvider.GetAuthenticationStateAsync();

            campaignDTO.OwnerEmailAddress = authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)!.Value;

            var result = await CampaignService.CreateCampaignAsync(campaignDTO);

            if (form.IsValid && result.Flag)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            {
                Message = result.Message;
            }

            Snackbar.Add(Message, !result.Flag ? MudBlazor.Severity.Success : MudBlazor.Severity.Error);
        }
        catch(Exception exception)
        {
            // Snackbar.Add(exception.Message, MudBlazor.Severity.Error);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private async Task UploadBannerImage(IBrowserFile imageFile)
    {
        if (imageFile == null || imageFile.Size == 0) return;

        using var ms = new MemoryStream();

        // Await the async copy method to ensure it's processed correctly
        await imageFile.OpenReadStream(10485760).CopyToAsync(ms);

        var fileBytes = ms.ToArray();

        // Store the file information in the DTO
        campaignDTO.FileName = imageFile.Name;
        campaignDTO.ContentType = imageFile.ContentType;
        campaignDTO.Data = Encoding.ASCII.GetString(fileBytes);

        // Convert the image to a base64 string for previewing
        var imagesrc = Convert.ToBase64String(fileBytes);

        // Set the image source for preview in the UI
        SelectedImageSrc = $"data:{imageFile.ContentType};base64,{imagesrc}";
    }

    private void Cancel() => MudDialog.Cancel();


    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API.
    /// </summary>
    /// <typeparam name="OrderModel"></typeparam>
    public class CampaignValidator : AbstractValidator<CampaignDTO>
    {
        public CampaignValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Name is required.")
                .MaximumLength(50).WithMessage("Name cannot exceed 50 characters.");
            RuleFor(x => x.OwnerEmailAddress)
            .Cascade(CascadeMode.Stop)
            .NotEmpty()
            .EmailAddress();
            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("Description is required.")
                .MaximumLength(1000).WithMessage("Description cannot exceed 1000 characters.");

            When(x => x.Data != null, () =>
            {
                RuleFor(x => x.Data!.Length).LessThanOrEqualTo(10485760).WithMessage("The maximum image file size is 10 MB.");
            });
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CampaignDTO>.CreateWithOptions((CampaignDTO)model, x => x.IncludeProperties(propertyName)));

            if (result.IsValid) return Array.Empty<string>();

            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}