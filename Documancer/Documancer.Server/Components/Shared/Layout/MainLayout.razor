@using Documancer.Server.Constants
@using Documancer.Server.Services.JsInterop

@inherits LayoutComponentBase

@implements IDisposable

@inject LayoutService LayoutService
@inject LocalTimezoneOffset LocalTimezoneOffset

<PageTitle>@ApplicationSettings.AppName</PageTitle>

<MudRTLProvider RightToLeft="@LayoutService.IsRTL">
    <MudThemeProvider />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="@LayoutService.SetDarkMode" />
    <CascadingValue Name="LocalTimezoneOffset" Value="@_localTimezoneOffset">
        @Body
    </CascadingValue>
</MudRTLProvider>


@code
{
    private int _localTimezoneOffset;

    private MudThemeProvider _mudThemeProvider = null!;

    private bool _defaultDarkMode;


    public void Dispose()
    {
        LayoutService.MajorUpdateOccured -= LayoutServiceOnMajorUpdateOccured;
        GC.SuppressFinalize(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            await ApplyUserPreferences();
            StateHasChanged();
        }
    }

    private async Task ApplyUserPreferences()
    {
        _defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
        
        await LayoutService.ApplyUserPreferences(_defaultDarkMode);
    }

    protected override async Task OnInitializedAsync()
    {
        _localTimezoneOffset = await LocalTimezoneOffset.HourOffset();
        
        LayoutService.MajorUpdateOccured += LayoutServiceOnMajorUpdateOccured;
        LayoutService.SetBaseTheme(Theme.ApplicationTheme());
    }

    private void LayoutServiceOnMajorUpdateOccured(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

}
