@page "/account/identity/login"

@using Documancer.Client.Layout.Account.Identity
@using Documancer.Application.DataTransferObjects.Request.Account
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components

@layout AuthenticationLayout

<MudGrid Class="mt-5">
    <MudItem xs="12" sm="6" md="4" class="mx-auto">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5" Align="Align.Center">Log In to Documancer</MudText>
                <EditForm Model="@LoginModel" OnValidSubmit="LoginAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <MudTextField @bind-Value="LoginModel.EmailAddress" Label="Email Address" Variant="Variant.Outlined"
                                  Required="true" Adornment="Adornment.End" 
                                  AdornmentIcon="@Icons.Material.Filled.Email" 
                                  For="@(() => LoginModel.EmailAddress)"
                                  ErrorText="@GetErrorText(() => LoginModel.EmailAddress)" 
                                  Immediate="true" />

                    <MudTextField @bind-Value="LoginModel.Password" Label="Password" Variant="Variant.Outlined"
                                  Required="true" InputType="InputType.Password" 
                                  Adornment="Adornment.End" 
                                  AdornmentIcon="@Icons.Material.Filled.Lock" 
                                  For="@(() => LoginModel.Password)"
                                  ErrorText="@GetErrorText(() => LoginModel.Password)" 
                                  Immediate="true" />

                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" 
                               Class="mt-4" FullWidth="true">Log In</MudButton>
                </EditForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="NavigateToRegister" FullWidth="true">
                    Don't have an account? Register
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

<MudGrid Class="mt-3">
    <MudItem xs="12" sm="6" md="4" class="mx-auto">
        <MudPaper Class="pa-4" Elevation="1">
            <MudText Typo="Typo.subtitle1">Validation Summary</MudText>
            @if (validationErrors.Any())
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
            @if (loginFailed)
            {
                <MudText Color="Color.Error">Login failed. Please check your credentials.</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="ChangePassword">
                    Change Password
                </MudButton>
            }
            @if (success)
            {
                <MudText Color="Color.Success">Successfully logged in!</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code
{
    public LoginDTO LoginModel { get; set; } = new();

    private bool success = false;
    private bool loginFailed = false;

    private string? Message;

    private List<string> validationErrors = new List<string>();

    private EditContext EditContext;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(LoginModel);
    }

    private async Task LoginAsync()
    {
        try
        {
            var response = await AccountService.LoginAccountAsync(LoginModel);

            if (response.Flag)
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

                await customAuthStateProvider.UpdateAuthenticationState(new LocalStorageDTO() { Token = response.Token, Refresh = response.RefreshToken });

                NavigationManager.NavigateTo(uri: "content/home", true);
            }
            else
            {
                if (!string.IsNullOrEmpty(response.Message))
                {
                    validationErrors.Add(response.Message);
                }
                else
                {
                    validationErrors.Add("Invalid login attempt. Please try again.");
                }
            }
        }
        catch (Exception exception)
        {
            validationErrors.Add("An unexpected error occurred. Please try again later.");
            Message = "An unknown error ocurred.";
        }
    }

    private bool PasswordState = true;

    private string? PasswordType = "password";
    private string DisplayText = "Shown";

    private void ChangePassword()
    {
        PasswordState = !PasswordState;

        if (!PasswordState)
        {
            PasswordType = "text";
            DisplayText = "Hide";
        }
        else
        {
            PasswordType = "password";
            DisplayText = "Show";
        }
    }

    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                NavigationManager.NavigateTo("content/home", false, true);
            }
        }
        catch { }
    }

    private string GetErrorText(Expression<Func<string>> fieldExpression)
    {
        var field = (fieldExpression.Body as MemberExpression)?.Member.Name;
        var fieldIdentifier = new FieldIdentifier(LoginModel, field);
        var messages = EditContext.GetValidationMessages(fieldIdentifier);
        
        return messages.Any() ? string.Join(", ", messages) : string.Empty;
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/account/identity/register");
    }
}

